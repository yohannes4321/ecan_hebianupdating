/*
 * tests/dynamics/HebbianUpdatingAgentUTest.cxxtest
 *
 * Unit test for HebbianUpdatingAgent
 *
 * This test is designed to verify that Hebbian links are updated correctly
 * in the AtomSpace by the HebbianUpdatingAgent.
 */

#include <cxxtest/TestSuite.h>
#include <iostream>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attention/HebbianUpdatingAgent.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/attentionbank/types/atom_types.h>

using namespace opencog;

class HebbianUpdatingAgentUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    CogServer* cogServer;
    Scheduler* scheduler;
    HebbianUpdatingAgent* hebbianUpdatingAgent;
    AttentionBank* _bank;

public:
    void setUp()
    {
        cogServer = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        cogServer->loadModules();
        config().set("MODULES", "libagents.so");

        Module* amod = cogServer->getModule("opencog::AgentsModule");
        AgentsModule* agmod = static_cast<AgentsModule*>(amod);
        scheduler = &agmod->get_scheduler();

        as = &cogserver().getAtomSpace();
        hebbianUpdatingAgent = new HebbianUpdatingAgent(*cogServer);

        // Add the HebbianUpdatingAgent to the scheduler
        AbstractFactory<Agent>* hebbianUpdatingFactory = new Factory<HebbianUpdatingAgent, Agent>();
        scheduler->registerAgent(HebbianUpdatingAgent::info().id, hebbianUpdatingFactory);

        std::cout << "Setup completed for HebbianUpdatingAgentUTest." << std::endl;
    }

    void tearDown()
    {
        delete hebbianUpdatingAgent;
        cogServer->stop();
        std::cout << "TearDown completed for HebbianUpdatingAgentUTest." << std::endl;
    }

    void testHebbianLinkUpdate()
    {
        // Create sample atoms in AtomSpace
        Handle source = as->add_node(CONCEPT_NODE, "Source");
        Handle target1 = as->add_node(CONCEPT_NODE, "Target1");
        Handle target2 = as->add_node(CONCEPT_NODE, "Target2");

        std::cout << "Atoms created: " << source->to_string() << target1->to_string() << target2->to_string() << std::endl;

        // Set truth values for each node
        double initialConfidence = 0.9;
        source->setTruthValue(SimpleTruthValue::createTV(0.1, initialConfidence));
        target1->setTruthValue(SimpleTruthValue::createTV(0.3, initialConfidence));
        target2->setTruthValue(SimpleTruthValue::createTV(0.7, initialConfidence));

        std::cout << "Truth values set: " << source->to_string() << target1->to_string() << target2->to_string() << std::endl;

        // Create a Hebbian link between source and target nodes
        Handle hebbianLink = as->add_link(ASYMMETRIC_HEBBIAN_LINK, source, target1);
        hebbianLink->setTruthValue(SimpleTruthValue::createTV(0.01, initialConfidence));
        
        std::cout << "Hebbian link created between Source and Target1 with initial truth value 0.01 "<< hebbianLink->to_string() << std::endl;

        // Stimulate the atoms to bring them into the attentional focus
        AttentionBank& ab = attentionbank(as);
        ab.stimulate(source, 200);
        ab.stimulate(target1, 200);
        ab.stimulate(target2, 100);

        std::cout << "Atoms stimulated to bring them into attentional focus." << std::endl;

        // Run the HebbianUpdatingAgent to update the Hebbian links
        hebbianUpdatingAgent->run();

        std::cout << "HebbianUpdatingAgent run completed." << std::endl;

        // Retrieve the updated truth value of the Hebbian link
        TruthValuePtr updatedTV = hebbianLink->getTruthValue();
        double updatedMean = updatedTV->get_mean();
        /***
         * first truth value mean =0.01 confidence=0.9
second truth value mean 0.05 confidence =0.1

defualt_k =800

cval=0.2

convert confidence to counts

for the first truth value 

count1=defualt_k * confidence/(1-confidence)
count1 =800 * 0.9 /(1-0.9) = 720/0.1 =7200

for the second truth value 

count2 =defualt_k*confidence /(1-confidence)=800*0.1/(1-0.1)=80/0.9=88.89


step2 Compute the new count 

count_new=count1+count2 -min(count1,count2)*CVAL

count_new = 7200 + 88.89 -(88.89*0.2)

count_new =7200 + 88.89 -17.78 =7271.11



step3 compute the new mean

mean_new= mean*count1 + mean *count 2 /(count1+count2)

mean_new =0.01 *7200 + 0.05 * 88.89/(7200 + 88.89)
mean_new = 72 + 4.4445/(7288.89)=76.4445/7288.89 = 0.01049

step4 compute the new confidence 

cofidence_new= count _new /count_new + Defualt_k
confidence_new = 7271.11/7271.11 +800
confidence_new=7271.11 /8071.11=0.901

the merged truth value is mean 0.01049
confidence=0.901

         */

          // The expected values are calculated based on the given logic
    double count1 = 7200; // count1 = 800 * 0.9 / (1 - 0.9)
    double count2 = 88.89; // count2 = 800 * 0.1 / (1 - 0.1)
    double count_new = 7271.11; // count_new = count1 + count2 - (min(count1, count2) * cval)
    double mean_new = 0.01049; // mean_new = (mean1 * count1 + mean2 * count2) / (count1 + count2)
    double confidence_new = 0.901; // confidence_new = count_new / (count_new + default_k)

    // Check that the truth value of the link has changed based on the agent's logic
    TS_ASSERT_DELTA(updatedMean, mean_new, 0.1);  // Compare with expected mean value
    TS_ASSERT_DELTA(updatedTV->get_confidence(), confidence_new, 0.1); // Compare with expected confidence value
     HandleSeq attentionalFocus;
        AttentionBank& _bank = attentionbank(as);

        _bank.get_handle_set_in_attentional_focus(back_inserter(attentionalFocus));

        TS_ASSERT_EQUALS(attentionalFocus.size(), 3);  // Ensure 3 nodes are in focus

        

        // Run the HebbianUpdatingAgent to update the Hebbian links
        hebbianUpdatingAgent->run();
        

        for (Handle node : attentionalFocus)
        {
            HandleSeq incomingLinks = node->getIncomingSetByType(ASYMMETRIC_HEBBIAN_LINK);
            
            for (const Handle& link : incomingLinks)
            {
                double newTruthValue = link->getTruthValue()->get_mean();
                std::cout << "Updated truth value of link: " << newTruthValue << std::endl;

                TS_ASSERT(newTruthValue >= 0.0 && newTruthValue <= 1.0);  // Check truth value is within valid range
            }
        }



    }
};
